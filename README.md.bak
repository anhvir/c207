c207 Week 07:
=======

  Instructions this week:
--------------- 
  * For this week's lab, follow the instruction in LMS.Workshop.Week8. 
If you want some hints, read the second part of this document. 
  * Then, spend some time to inspect `graph.c`
  * `graph.c` is the solution for week 7 lab, you just need to download this file and include it in your lab week 7 folder. `SPECIAL FEATURE:` I included 2 options for Dijkstra's, one of which is exactly as the pseudocode shown in the lecture, which can help you to see that there is not much difference between a pseudocode and a C function :-). This implementation of Dijkstra's also prints out all shortest paths. 
  * `week7_git_solution.zip` is a folder that contains all files needed for week 7 solution. You shouldn't need this one. It is useful only if you have lost all of your week 7 files.

  Hints for lab this week
---------------------------
### Job 1: Unix's tsort:
First at all, of course, create a separate folder for this week's lab. Let's call it `tsort` and make it the working directory. You should download all `*.c` and `.h` files supplied in LMS this week here. Then: 
  * Create a text file `graph1.txt` for the graph in shown in the lab sheet. It should have 8 lines exactly as as shown in the input for tsort.
  * Try `tsort` with command `tsort < graph1.txt`.
  * Build `graph2.txt` for the second graph drawn in the lab sheet. And try `tsort` for this graph. Also create a toposort ordering by hand and compare with the output of tsort.

### Job 2: Writing your own topological sort.
Of course, you need to build a graph first. In this week, we use directed graphs. Your program should take files such as `graph1.txt` and `graph2.txt` as input, and should produce outputs that are identical to those of the Unix's `tsort`.
  * Note that vertex name is just a single character. So your graph have maximal 256 vertices (and hence, if you prefer, you can avoid dynamic memory for graph). 
  * You might want to use adjacency list to represent graphs. Module `list.c` and `list.h` (supplied in lab solution Week 4) could be used here.
  * You also want a graph module. You can take a simple graph module you made for Lab Week 4, then add the input part. You should maintain the mapping between vertex id (which are integer from 0 onwards) and vertex names (or labels) which are letters. You could also use your graph module from Lb Week 7, ignoring the weight.
  * Now in your folder you have `list.c`, `graph.c`, `sort.c`, `tsort,c` and `.h` files. You can build `Makefile` by take a copy from assignment 1 and make some trivial changes.
  * Spend time to finish `graph.c` first, and then you can implement topological sort functions in `sort.c`      


How to use this github site?
----------------------------
### If you just want a single file, say, `all.c`:
  * Click on `all.c` and you will see its content 
  * Copy the content and paste into your jEdit/editor window, then save as `all.c`

### If you want to download the whole directory:
  * Download this whole directory by clicking `Clone or Download` --> `Download ZIP`, it will normally be downloaded to your `Downloads` folder under the name `c207-master` or `c207-master.ZIP`
  * Then copy or move the folder `c207` from `Downloads` to under your working folder, say, `week2/`
  * If the downloaded `c207-master` has the extension `.ZIP`, you likely need to expand the zipped file with command `unzip c207-master.ZIP`. If that failes, you probably need to use some other tool to unzip, ask Google.
 
-------------------------------------------------------------
by Anh Vo, anhvir@gmail.com, for use in unimelb COMP20007 workshops.

For a teaching week, a new content is (normally) uploaded at the very beginning of the week, and that content is removed one week later.
